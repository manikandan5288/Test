{"ast":null,"code":"import _classCallCheck from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Personal\\\\React\\\\Test\\\\src\\\\atoms\\\\Converter\\\\Converter.js\";\nimport React from \"react\";\n\nvar Converter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Converter, _React$Component);\n\n  function Converter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Converter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Converter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      result: null,\n      fromCurrency: \"USD\",\n      toCurrency: \"GBP\",\n      amount: 1,\n      currencies: []\n    };\n    return _this;\n  }\n\n  _createClass(Converter, [{\n    key: \"componentDidMount\",\n    // Initializes the currencies with values from the api\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get(\"http://api.openrates.io/latest\").then(function (response) {\n        // Initialized with 'EUR' because the base currency is 'EUR'\n        // and it is not included in the response\n        var currencyAr = [\"EUR\"];\n\n        for (var key in response.data.rates) {\n          currencyAr.push(key);\n        }\n\n        _this2.setState({\n          currencies: currencyAr.sort()\n        });\n      }).catch(function (err) {\n        console.log(\"Opps\", err.message);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"I am converter\");\n    }\n  }]);\n\n  return Converter;\n}(React.Component);\n\nexport default Converter;","map":{"version":3,"sources":["D:\\Personal\\React\\Test\\src\\atoms\\Converter\\Converter.js"],"names":["React","Converter","state","result","fromCurrency","toCurrency","amount","currencies","axios","get","then","response","currencyAr","key","data","rates","push","setState","sort","catch","err","console","log","message","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,S;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,MAAM,EAAE,IADF;AAENC,MAAAA,YAAY,EAAE,KAFR;AAGNC,MAAAA,UAAU,EAAE,KAHN;AAINC,MAAAA,MAAM,EAAE,CAJF;AAKNC,MAAAA,UAAU,EAAE;AALN,K;;;;;;AAQR;wCACoB;AAAA;;AAClBC,MAAAA,KAAK,CACFC,GADH,CACO,gCADP,EAEGC,IAFH,CAEQ,UAAAC,QAAQ,EAAI;AAChB;AACA;AACA,YAAMC,UAAU,GAAG,CAAC,KAAD,CAAnB;;AACA,aAAK,IAAMC,GAAX,IAAkBF,QAAQ,CAACG,IAAT,CAAcC,KAAhC,EAAuC;AACrCH,UAAAA,UAAU,CAACI,IAAX,CAAgBH,GAAhB;AACD;;AACD,QAAA,MAAI,CAACI,QAAL,CAAc;AAAEV,UAAAA,UAAU,EAAEK,UAAU,CAACM,IAAX;AAAd,SAAd;AACD,OAVH,EAWGC,KAXH,CAWS,UAAAC,GAAG,EAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAAG,CAACG,OAAxB;AACD,OAbH;AAcD;;;6BACQ;AACP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD;;;;EA5BqBvB,KAAK,CAACwB,S;;AA8B9B,eAAevB,SAAf","sourcesContent":["import React from \"react\";\r\n\r\nclass Converter extends React.Component {\r\n  state = {\r\n    result: null,\r\n    fromCurrency: \"USD\",\r\n    toCurrency: \"GBP\",\r\n    amount: 1,\r\n    currencies: [],\r\n  };\r\n\r\n  // Initializes the currencies with values from the api\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"http://api.openrates.io/latest\")\r\n      .then(response => {\r\n        // Initialized with 'EUR' because the base currency is 'EUR'\r\n        // and it is not included in the response\r\n        const currencyAr = [\"EUR\"]\r\n        for (const key in response.data.rates) {\r\n          currencyAr.push(key)\r\n        }\r\n        this.setState({ currencies: currencyAr.sort() })\r\n      })\r\n      .catch(err => {\r\n        console.log(\"Opps\", err.message);\r\n      });\r\n  }\r\n  render() {\r\n    return <div>I am converter</div>;\r\n  }\r\n}\r\nexport default Converter;\r\n"]},"metadata":{},"sourceType":"module"}