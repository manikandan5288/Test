{"ast":null,"code":"import _classCallCheck from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Personal\\\\React\\\\Test\\\\src\\\\atoms\\\\Converter\\\\Converter.js\";\nimport React from \"react\";\n\nvar Converter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Converter, _React$Component);\n\n  function Converter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Converter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Converter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      result: null,\n      fromCurrency: \"USD\",\n      toCurrency: \"GBP\",\n      amount: 1,\n      currencies: []\n    };\n\n    _this.convertHandler = function () {\n      if (_this.state.fromCurrency !== _this.state.toCurrency) {\n        axios.get(\"http://api.openrates.io/latest?base=\".concat(_this.state.fromCurrency, \"&symbols=\").concat(_this.state.toCurrency)).then(function (response) {\n          var result = _this.state.amount * response.data.rates[_this.state.toCurrency];\n\n          _this.setState({\n            result: result.toFixed(5)\n          });\n        }).catch(function (err) {\n          console.log(\"Opps\", err.message);\n        });\n      } else {\n        _this.setState({\n          result: \"You cant convert the same currency!\"\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Converter, [{\n    key: \"componentDidMount\",\n    // Initializes the currencies with values from the api\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      axios.get(\"http://api.openrates.io/latest\").then(function (response) {\n        // Initialized with 'EUR' because the base currency is 'EUR'\n        // and it is not included in the response\n        var currencyAr = [\"EUR\"];\n\n        for (var key in response.data.rates) {\n          currencyAr.push(key);\n        }\n\n        _this2.setState({\n          currencies: currencyAr.sort()\n        });\n      }).catch(function (err) {\n        console.log(\"Opps\", err.message);\n      });\n    } // Event handler for the conversion\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"I am converter\");\n    }\n  }]);\n\n  return Converter;\n}(React.Component);\n\nexport default Converter;","map":{"version":3,"sources":["D:\\Personal\\React\\Test\\src\\atoms\\Converter\\Converter.js"],"names":["React","Converter","state","result","fromCurrency","toCurrency","amount","currencies","convertHandler","axios","get","then","response","data","rates","setState","toFixed","catch","err","console","log","message","currencyAr","key","push","sort","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,S;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,MAAM,EAAE,IADF;AAENC,MAAAA,YAAY,EAAE,KAFR;AAGNC,MAAAA,UAAU,EAAE,KAHN;AAINC,MAAAA,MAAM,EAAE,CAJF;AAKNC,MAAAA,UAAU,EAAE;AALN,K;;UA2BRC,c,GAAiB,YAAM;AACrB,UAAI,MAAKN,KAAL,CAAWE,YAAX,KAA4B,MAAKF,KAAL,CAAWG,UAA3C,EAAuD;AACnDI,QAAAA,KAAK,CACAC,GADL,+CACgD,MAAKR,KAAL,CAAWE,YAD3D,sBACmF,MAAKF,KAAL,CAAWG,UAD9F,GAEKM,IAFL,CAEU,UAAAC,QAAQ,EAAI;AACd,cAAMT,MAAM,GAAG,MAAKD,KAAL,CAAWI,MAAX,GAAqBM,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoB,MAAKZ,KAAL,CAAWG,UAA/B,CAApC;;AACA,gBAAKU,QAAL,CAAc;AAAEZ,YAAAA,MAAM,EAAEA,MAAM,CAACa,OAAP,CAAe,CAAf;AAAV,WAAd;AACH,SALL,EAMKC,KANL,CAMW,UAAAC,GAAG,EAAI;AACVC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAAG,CAACG,OAAxB;AACH,SARL;AASH,OAVD,MAUO;AACH,cAAKN,QAAL,CAAc;AAAEZ,UAAAA,MAAM,EAAE;AAAV,SAAd;AACH;AACJ,K;;;;;;;AAjCC;wCACoB;AAAA;;AAClBM,MAAAA,KAAK,CACFC,GADH,CACO,gCADP,EAEGC,IAFH,CAEQ,UAAAC,QAAQ,EAAI;AAChB;AACA;AACA,YAAMU,UAAU,GAAG,CAAC,KAAD,CAAnB;;AACA,aAAK,IAAMC,GAAX,IAAkBX,QAAQ,CAACC,IAAT,CAAcC,KAAhC,EAAuC;AACrCQ,UAAAA,UAAU,CAACE,IAAX,CAAgBD,GAAhB;AACD;;AACD,QAAA,MAAI,CAACR,QAAL,CAAc;AAAER,UAAAA,UAAU,EAAEe,UAAU,CAACG,IAAX;AAAd,SAAd;AACD,OAVH,EAWGR,KAXH,CAWS,UAAAC,GAAG,EAAI;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,GAAG,CAACG,OAAxB;AACD,OAbH;AAcD,K,CAED;;;;6BAiBS;AACP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD;;;;EA9CqBrB,KAAK,CAAC0B,S;;AAgD9B,eAAezB,SAAf","sourcesContent":["import React from \"react\";\r\n\r\nclass Converter extends React.Component {\r\n  state = {\r\n    result: null,\r\n    fromCurrency: \"USD\",\r\n    toCurrency: \"GBP\",\r\n    amount: 1,\r\n    currencies: [],\r\n  };\r\n\r\n  // Initializes the currencies with values from the api\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"http://api.openrates.io/latest\")\r\n      .then(response => {\r\n        // Initialized with 'EUR' because the base currency is 'EUR'\r\n        // and it is not included in the response\r\n        const currencyAr = [\"EUR\"]\r\n        for (const key in response.data.rates) {\r\n          currencyAr.push(key)\r\n        }\r\n        this.setState({ currencies: currencyAr.sort() })\r\n      })\r\n      .catch(err => {\r\n        console.log(\"Opps\", err.message);\r\n      });\r\n  }\r\n\r\n  // Event handler for the conversion\r\n  convertHandler = () => {\r\n    if (this.state.fromCurrency !== this.state.toCurrency) {\r\n        axios\r\n            .get(`http://api.openrates.io/latest?base=${this.state.fromCurrency}&symbols=${this.state.toCurrency}`)\r\n            .then(response => {\r\n                const result = this.state.amount * (response.data.rates[this.state.toCurrency]);\r\n                this.setState({ result: result.toFixed(5) })\r\n            })\r\n            .catch(err => {\r\n                console.log(\"Opps\", err.message);\r\n            });\r\n    } else {\r\n        this.setState({ result: \"You cant convert the same currency!\" })\r\n    }\r\n};\r\n\r\n  render() {\r\n    return <div>I am converter</div>;\r\n  }\r\n}\r\nexport default Converter;\r\n"]},"metadata":{},"sourceType":"module"}