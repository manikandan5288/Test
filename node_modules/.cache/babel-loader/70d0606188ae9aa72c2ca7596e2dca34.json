{"ast":null,"code":"import _classCallCheck from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\n\nvar _temp,\n    _jsxFileName = \"D:\\\\Personal\\\\React\\\\Test\\\\src\\\\atoms\\\\Converter\\\\Converter.js\";\n\nimport React from \"react\";\nimport axios from 'axios';\nimport \"../Converter/Converter.css\";\nvar SECRECT_KEY = '76f5ea65dcc33674258094294818f787';\nvar ERROR_MESSAGE_EXIST = (_temp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Converter, _React$Component);\n\n  function Converter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Converter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Converter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      baseCurrency: 'SEK',\n      toCurrency: \"INR\",\n      amount: 1,\n      baseCurrencyValue: 0,\n      result: 0,\n      currencies: [],\n      currencyRates: [],\n      error: null\n    };\n\n    _this.selectHandler = function (event) {\n      _this.setState({\n        toCurrency: event.target.value\n      });\n\n      _this.convertHandler(_this.state.amount, event.target.value);\n    };\n\n    _this.convertHandler = function (amount, toCurrencyCode) {\n      if (_this.state.baseCurrency !== toCurrencyCode) {\n        var toCurrencyVal;\n\n        for (var key in _this.state.currencyRates) {\n          toCurrencyVal = _this.state.currencyRates[toCurrencyCode];\n        }\n\n        var convertedValue = amount / _this.state.baseCurrencyValue * toCurrencyVal;\n\n        _this.setState({\n          result: convertedValue ? convertedValue.toFixed(2) : 0,\n          error: ''\n        });\n      } else {\n        _this.setState({\n          result: 0\n        });\n\n        _this.setState({\n          error: \"You can't convert the same currency!\"\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Converter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var url = \"http://data.fixer.io/api/latest?access_key=\".concat(SECRECT_KEY);\n\n      try {\n        axios.get(url).then(function (response) {\n          if (response.data.success) {\n            var currencyAr = [];\n            var baseCurrencyVal;\n\n            for (var key in response.data.rates) {\n              baseCurrencyVal = response.data.rates[_this2.state.baseCurrency];\n              currencyAr.push(key);\n            }\n\n            _this2.setState({\n              baseCurrencyValue: baseCurrencyVal,\n              currencies: currencyAr.sort(),\n              currencyRates: response.data.rates\n            });\n\n            _this2.convertHandler(_this2.state.amount, _this2.state.toCurrency);\n          } else {\n            console.log(response.data.error.type);\n\n            _this2.setState({\n              error: response.data.error.type\n            });\n          }\n        }).catch(function (err) {\n          _this2.setState({\n            error: err.message\n          });\n        });\n      } catch (e) {\n        this.setState({\n          error: e\n        });\n      }\n    }\n  }, {\n    key: \"onChangeHandle\",\n    value: function onChangeHandle(e) {\n      this.setState({\n        amount: e.target.value\n      });\n      this.convertHandler(e.target.value, this.state.toCurrency);\n    } // Updates the states based on the dropdown that was changed\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: \"converter-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Currency Converter Section\"), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Enter SEK Amount\"), React.createElement(\"input\", {\n        name: \"amount\",\n        type: \"number\",\n        placeholder: \"Enter SEK Amount\",\n        value: this.state.amount,\n        onChange: function onChange(event) {\n          return _this3.onChangeHandle(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \" to \"), React.createElement(\"select\", {\n        name: \"to\",\n        onChange: function onChange(event) {\n          return _this3.selectHandler(event);\n        },\n        value: this.state.toCurrency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, this.state.currencies.map(function (currency) {\n        return React.createElement(\"option\", {\n          key: currency,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, currency);\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \" = \"), React.createElement(\"input\", {\n        name: \"converted-amount\",\n        className: \"readOnly\",\n        type: \"text\",\n        value: \"\".concat(this.state.result, \" \").concat(this.state.toCurrency),\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), this.state.error && React.createElement(\"div\", {\n        className: \"errorMessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, this.state.error));\n    }\n  }]);\n\n  return Converter;\n}(React.Component), _temp);\nexport default Converter;","map":{"version":3,"sources":["D:\\Personal\\React\\Test\\src\\atoms\\Converter\\Converter.js"],"names":["React","axios","SECRECT_KEY","ERROR_MESSAGE_EXIST","state","baseCurrency","toCurrency","amount","baseCurrencyValue","result","currencies","currencyRates","error","selectHandler","event","setState","target","value","convertHandler","toCurrencyCode","toCurrencyVal","key","convertedValue","toFixed","url","get","then","response","data","success","currencyAr","baseCurrencyVal","rates","push","sort","console","log","type","catch","err","message","e","onChangeHandle","map","currency","Component","Converter"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from 'axios';\r\nimport \"../Converter/Converter.css\"\r\n\r\nconst SECRECT_KEY = '76f5ea65dcc33674258094294818f787';\r\nconst ERROR_MESSAGE_EXIST = \r\n\r\nclass Converter extends React.Component {\r\n  state = {\r\n    baseCurrency: 'SEK',\r\n    toCurrency: \"INR\",\r\n    amount: 1,\r\n    baseCurrencyValue: 0,\r\n    result: 0,\r\n    currencies: [],\r\n    currencyRates: [],\r\n    error: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    let url = `http://data.fixer.io/api/latest?access_key=${SECRECT_KEY}`;\r\n    try {\r\n      axios.get(url).then(response => {\r\n        if (response.data.success) {\r\n          const currencyAr = [];\r\n          let baseCurrencyVal;\r\n          for (let key in response.data.rates) {\r\n            baseCurrencyVal = response.data.rates[this.state.baseCurrency];\r\n            currencyAr.push(key)\r\n          }\r\n          this.setState({\r\n            baseCurrencyValue: baseCurrencyVal,\r\n            currencies: currencyAr.sort(),\r\n            currencyRates: response.data.rates\r\n          });\r\n          this.convertHandler(this.state.amount, this.state.toCurrency);\r\n        } else {\r\n          console.log(response.data.error.type)\r\n          this.setState({ error: response.data.error.type });\r\n        }\r\n      })\r\n        .catch(err => {\r\n          this.setState({ error: err.message });\r\n        });\r\n    } catch (e) {\r\n      this.setState({ error: e });\r\n    }\r\n  }\r\n\r\n  onChangeHandle(e) {\r\n    this.setState({ amount: e.target.value })\r\n    this.convertHandler(e.target.value, this.state.toCurrency);\r\n  }\r\n\r\n  // Updates the states based on the dropdown that was changed\r\n  selectHandler = (event) => {\r\n    this.setState({ toCurrency: event.target.value })\r\n    this.convertHandler(this.state.amount, event.target.value);\r\n  }\r\n\r\n  // Event handler for the conversion\r\n  convertHandler = (amount, toCurrencyCode) => {\r\n    if (this.state.baseCurrency !== toCurrencyCode) {\r\n      let toCurrencyVal;\r\n      for (let key in this.state.currencyRates) {\r\n        toCurrencyVal = this.state.currencyRates[toCurrencyCode];\r\n      }\r\n      let convertedValue = (amount / this.state.baseCurrencyValue) * toCurrencyVal;\r\n      this.setState({\r\n        result: convertedValue ? convertedValue.toFixed(2) : 0,\r\n        error: ''\r\n      })\r\n\r\n    } else {\r\n      this.setState({ result: 0 })\r\n      this.setState({ error: \"You can't convert the same currency!\" });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <div className=\"converter-container\">\r\n      <h2>Currency Converter Section</h2>\r\n      <label>Enter SEK Amount</label>\r\n      <input\r\n        name=\"amount\"\r\n        type=\"number\"\r\n        placeholder=\"Enter SEK Amount\"\r\n        value={this.state.amount}\r\n        onChange={event => this.onChangeHandle(event)}\r\n      />\r\n      <label> to </label>\r\n      <select\r\n        name=\"to\"\r\n        onChange={(event) => this.selectHandler(event)}\r\n        value={this.state.toCurrency}\r\n      >\r\n        {this.state.currencies.map(currency => (\r\n          <option key={currency}>{currency}</option>\r\n        ))}\r\n      </select>\r\n      <label> = </label>\r\n      <input\r\n        name=\"converted-amount\"\r\n        className=\"readOnly\"\r\n        type=\"text\"\r\n        value={`${this.state.result} ${this.state.toCurrency}`}\r\n        readOnly\r\n      />\r\n      {this.state.error && <div className='errorMessage'>{this.state.error}</div>}\r\n    </div >;\r\n  }\r\n}\r\nexport default Converter;\r\n"]},"metadata":{},"sourceType":"module"}