{"ast":null,"code":"import _classCallCheck from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Personal\\\\React\\\\Test\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Personal\\\\React\\\\Test\\\\src\\\\atoms\\\\Converter\\\\Converter.js\";\nimport React from \"react\";\nimport axios from 'axios';\nimport \"../Converter/Converter.css\";\nvar SECRECT_KEY = '76f5ea65dcc33674258094294818f787';\n\nvar Converter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Converter, _React$Component);\n\n  function Converter() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Converter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Converter)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      result: 0.00,\n      toCurrency: \"INR\",\n      amount: 1,\n      baseCurrency: 'SEK',\n      baseCurrencyValue: 0,\n      currencies: [],\n      currencyRates: []\n    };\n\n    _this.selectHandler = function (event) {\n      console.log('i am select handler', _this.state.amount); //if (event.target.name === \"to\") {\n\n      _this.setState({\n        toCurrency: event.target.value\n      }); //}\n\n    };\n\n    _this.convertHandler = function (amount) {\n      if (_this.state.baseCurrency !== _this.state.toCurrency) {\n        var toCurrencyVal;\n\n        for (var key in _this.state.currencyRates) {\n          toCurrencyVal = _this.state.currencyRates[_this.state.toCurrency];\n        }\n\n        var convertedValue = amount / _this.state.baseCurrencyValue * toCurrencyVal;\n        console.log('convertedValue', convertedValue);\n\n        _this.setState({\n          result: convertedValue\n        });\n      } else {\n        _this.setState({\n          result: \"You can't convert the same currency!\"\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Converter, [{\n    key: \"componentDidMount\",\n    // Initializes the currencies with values from the api\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      console.log(this.state.amount);\n      axios.get(\"http://data.fixer.io/api/latest?access_key=\".concat(SECRECT_KEY)).then(function (response) {\n        var currencyAr = [];\n        var baseCurrencyVal;\n\n        for (var key in response.data.rates) {\n          baseCurrencyVal = response.data.rates[_this2.state.baseCurrency];\n          currencyAr.push(key);\n        }\n\n        _this2.setState({\n          baseCurrencyValue: baseCurrencyVal,\n          currencies: currencyAr.sort(),\n          currencyRates: response.data.rates\n        });\n\n        _this2.convertHandler(_this2.state.amount);\n      }).catch(function (err) {\n        console.log(\"Opps\", err.message);\n      }); //console.log('baseValue', this.state.baseCurrencyValue)\n    }\n  }, {\n    key: \"onChangeHandle\",\n    value: function onChangeHandle(e) {\n      this.setState({\n        amount: e.target.value\n      });\n      this.convertHandler(e.target.value);\n    } // Updates the states based on the dropdown that was changed\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"I am converter\"), React.createElement(\"div\", {\n        className: \"Converter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"Form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"amount\",\n        type: \"number\",\n        value: this.state.amount,\n        onChange: function onChange(event) {\n          return _this3.onChangeHandle(event);\n        }\n        /* onChange={event =>\r\n           this.setState({ amount: event.target.value })\r\n         } */\n        ,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(\"select\", {\n        name: \"to\",\n        onChange: function onChange(event) {\n          return _this3.selectHandler(event);\n        },\n        value: this.state.toCurrency,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, this.state.currencies.map(function (cur) {\n        return React.createElement(\"option\", {\n          key: cur,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, cur);\n      })), React.createElement(\"input\", {\n        name: \"converted-amount\",\n        type: \"text\",\n        value: this.state.result,\n        readOnly: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return Converter;\n}(React.Component);\n\nexport default Converter;","map":{"version":3,"sources":["D:\\Personal\\React\\Test\\src\\atoms\\Converter\\Converter.js"],"names":["React","axios","SECRECT_KEY","Converter","state","result","toCurrency","amount","baseCurrency","baseCurrencyValue","currencies","currencyRates","selectHandler","event","console","log","setState","target","value","convertHandler","toCurrencyVal","key","convertedValue","get","then","response","currencyAr","baseCurrencyVal","data","rates","push","sort","catch","err","message","e","onChangeHandle","map","cur","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport axios from 'axios';\r\nimport \"../Converter/Converter.css\"\r\n\r\nconst SECRECT_KEY = '76f5ea65dcc33674258094294818f787';\r\n\r\nclass Converter extends React.Component {\r\n  state = {\r\n    result: 0.00,\r\n    toCurrency: \"INR\",\r\n    amount: 1,\r\n    baseCurrency: 'SEK',\r\n    baseCurrencyValue: 0,\r\n    currencies: [],\r\n    currencyRates: []\r\n  };\r\n\r\n\r\n  // Initializes the currencies with values from the api\r\n  componentDidMount() {\r\n    console.log(this.state.amount)\r\n    axios.get(`http://data.fixer.io/api/latest?access_key=${SECRECT_KEY}`).then(response => {\r\n      const currencyAr = [];\r\n      let baseCurrencyVal;\r\n      for (let key in response.data.rates) {\r\n        baseCurrencyVal = response.data.rates[this.state.baseCurrency];\r\n        currencyAr.push(key)\r\n      }\r\n      this.setState({\r\n        baseCurrencyValue: baseCurrencyVal,\r\n        currencies: currencyAr.sort(),\r\n        currencyRates: response.data.rates\r\n      });\r\n      this.convertHandler(this.state.amount);\r\n    })\r\n      .catch(err => {\r\n        console.log(\"Opps\", err.message);\r\n      });\r\n    //console.log('baseValue', this.state.baseCurrencyValue)\r\n  }\r\n\r\n  onChangeHandle(e) {\r\n    this.setState({ amount: e.target.value })\r\n    this.convertHandler(e.target.value);\r\n  }\r\n\r\n\r\n\r\n  // Updates the states based on the dropdown that was changed\r\n  selectHandler = (event) => {\r\n    console.log('i am select handler', this.state.amount)\r\n    //if (event.target.name === \"to\") {\r\n    this.setState({ toCurrency: event.target.value })\r\n    //}\r\n  }\r\n\r\n  // Event handler for the conversion\r\n  convertHandler = (amount) => {\r\n    if (this.state.baseCurrency !== this.state.toCurrency) {\r\n      let toCurrencyVal;\r\n      for (let key in this.state.currencyRates) {\r\n        toCurrencyVal = this.state.currencyRates[this.state.toCurrency];\r\n      }\r\n      let convertedValue = (amount / this.state.baseCurrencyValue) * toCurrencyVal;\r\n      console.log('convertedValue', convertedValue)\r\n      this.setState({ result: convertedValue })\r\n\r\n    } else {\r\n      this.setState({ result: \"You can't convert the same currency!\" })\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return <div>\r\n      <h2>I am converter</h2>\r\n\r\n      <div className=\"Converter\">\r\n        <div className=\"Form\">\r\n          <input\r\n            name=\"amount\"\r\n            type=\"number\"\r\n            value={this.state.amount}\r\n            onChange={event => this.onChangeHandle(event)}\r\n          /* onChange={event =>\r\n             this.setState({ amount: event.target.value })\r\n           } */\r\n          />\r\n          <select\r\n            name=\"to\"\r\n            onChange={(event) => this.selectHandler(event)}\r\n            value={this.state.toCurrency}\r\n          >\r\n            {this.state.currencies.map(cur => (\r\n              <option key={cur}>{cur}</option>\r\n            ))}\r\n          </select>\r\n          <input\r\n            name=\"converted-amount\"\r\n            type=\"text\"\r\n            value={this.state.result}\r\n            readOnly\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>;\r\n  }\r\n}\r\nexport default Converter;\r\n"]},"metadata":{},"sourceType":"module"}